// src/html-parser/jsx-elem-to-html.ts
import { ContextMap } from "../context-map/context-map.mjs";
import { ErrorBoundary } from "../error-boundary/error-boundary.mjs";
import { pad } from "../utilities/pad.mjs";
import { mapAttributesToHtmlTagString } from "./attribute-to-html-tag-string.mjs";
import { getHTMLStruct } from "./get-html-struct.mjs";
var isSyncElem = (e) => true;
var isTextNode = (e) => "type" in e && e.type === "textNode";
var jsxElemToHtmlSync = (element, contextMap = ContextMap.create(), options) => {
  const { attributeMap = {}, currentIndent = 0, indent = 2 } = options ?? {};
  contextMap = ContextMap.clone(contextMap);
  if (!isSyncElem(element))
    throw new Error("");
  if (element.type === "textNode") {
    const indentPadding = pad(currentIndent);
    return indentPadding + element.text;
  }
  if (typeof element.tag !== "string") {
    if (ErrorBoundary._isErrorBoundary(element.tag)) {
      const boundary = new element.tag(element.props);
      try {
        const subElem2 = boundary.render(
          element.props,
          contextMap
        );
        if (subElem2 instanceof Promise) {
          throw new Error(
            `Encountered an async Component: [${element.tag.name}.render] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
          );
        }
        return jsxElemToHtmlSync(subElem2, contextMap, {
          indent,
          currentIndent,
          attributeMap
        });
      } catch (e) {
        const fallbackElem = boundary.onError(e, element.props, contextMap);
        if (fallbackElem instanceof Promise) {
          throw new Error(
            `Encountered an async Component: [${element.tag.name}.onError] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
          );
        }
        return jsxElemToHtmlSync(fallbackElem, contextMap, {
          indent,
          currentIndent,
          attributeMap
        });
      }
    }
    const subElem = element.tag(
      element.props,
      contextMap
    );
    if (subElem instanceof Promise) {
      throw new Error(
        `Encountered an async Component: [${element.tag.name}] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
      );
    }
    return jsxElemToHtmlSync(subElem, contextMap, {
      indent,
      currentIndent,
      attributeMap
    });
  } else {
    const htmlStruct = getHTMLStruct(element, attributeMap);
    if (htmlStruct.tag === "") {
      const results = [];
      for (const child of htmlStruct.children) {
        const renderedChild = jsxElemToHtmlSync(child, contextMap, {
          indent,
          currentIndent: currentIndent + indent,
          attributeMap
        });
        if (renderedChild.length > 0)
          results.push(renderedChild);
      }
      return results.join("\n");
    } else {
      const inlineTag = htmlStruct.children.length === 0 || htmlStruct.children.every(isTextNode);
      const indentPadding = pad(currentIndent);
      const startTag = [
        `${indentPadding}<${htmlStruct.tag}`,
        ...mapAttributesToHtmlTagString(htmlStruct.attributes)
      ].join(" ") + ">";
      const endTag = `${inlineTag ? "" : indentPadding}</${htmlStruct.tag}>`;
      const children = [];
      for (const child of htmlStruct.children) {
        const renderedChild = jsxElemToHtmlSync(child, contextMap, {
          indent: inlineTag ? 0 : indent,
          currentIndent: inlineTag ? 0 : currentIndent + indent,
          attributeMap
        });
        if (renderedChild.length > 0)
          children.push(renderedChild);
      }
      if (inlineTag) {
        return startTag + children.join("") + endTag;
      }
      return [startTag, ...children, endTag].join("\n");
    }
  }
};
var jsxElemToHtmlAsync = async (element, contextMap = ContextMap.create(), options) => {
  const { attributeMap = {}, currentIndent = 0, indent = 2 } = options ?? {};
  contextMap = ContextMap.clone(contextMap);
  if (!isSyncElem(element))
    throw new Error("");
  if (element.type === "textNode") {
    const indentPadding = pad(currentIndent);
    return indentPadding + element.text;
  }
  if (typeof element.tag !== "string") {
    if (ErrorBoundary._isErrorBoundary(element.tag)) {
      const boundary = new element.tag(element.props);
      try {
        const subElem2 = await boundary.render(
          element.props,
          contextMap
        );
        return await jsxElemToHtmlAsync(subElem2, contextMap, {
          indent,
          currentIndent,
          attributeMap
        });
      } catch (e) {
        const fallbackElem = await boundary.onError(
          e,
          element.props,
          contextMap
        );
        return await jsxElemToHtmlAsync(fallbackElem, contextMap, {
          indent,
          currentIndent,
          attributeMap
        });
      }
    }
    const subElem = await element.tag(
      element.props,
      contextMap
    );
    return await jsxElemToHtmlAsync(subElem, contextMap, {
      indent,
      currentIndent,
      attributeMap
    });
  } else {
    const htmlStruct = getHTMLStruct(element, attributeMap);
    if (htmlStruct.tag === "") {
      const results = [];
      for (const child of htmlStruct.children) {
        const renderedChild = await jsxElemToHtmlAsync(child, contextMap, {
          indent,
          currentIndent: currentIndent + indent,
          attributeMap
        });
        if (renderedChild.length > 0)
          results.push(renderedChild);
      }
      return results.join("\n");
    } else {
      const inlineTag = htmlStruct.children.length === 0 || htmlStruct.children.every(isTextNode);
      const indentPadding = pad(currentIndent);
      const startTag = [
        `${indentPadding}<${htmlStruct.tag}`,
        ...mapAttributesToHtmlTagString(htmlStruct.attributes)
      ].join(" ") + ">";
      const endTag = `${inlineTag ? "" : indentPadding}</${htmlStruct.tag}>`;
      const children = [];
      for (const child of htmlStruct.children) {
        const renderedChild = await jsxElemToHtmlAsync(child, contextMap, {
          indent: inlineTag ? 0 : indent,
          currentIndent: inlineTag ? 0 : currentIndent + indent,
          attributeMap
        });
        if (renderedChild.length > 0)
          children.push(renderedChild);
      }
      if (inlineTag) {
        return startTag + children.join("") + endTag;
      }
      return [startTag, ...children, endTag].join("\n");
    }
  }
};
export {
  jsxElemToHtmlAsync,
  jsxElemToHtmlSync
};
