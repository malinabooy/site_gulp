// src/jsx/jsx-runtime.ts
var createElement = (tag, props, ...children) => {
  props ?? (props = {});
  if (children) {
    props.children = [
      ...props.children ? Array.isArray(props.children) ? props.children.flat(2) : [props.children] : [],
      ...children.flat(2)
    ];
  }
  if (props?.children) {
    if (typeof props.children === "string") {
      props.children = { type: "textNode", text: props.children };
    } else if (typeof props.children === "number") {
      props.children = {
        type: "textNode",
        text: props.children.toString()
      };
    } else if (Array.isArray(props.children)) {
      props.children = props.children.reduce(
        (cl, child) => {
          if (typeof child === "boolean" || child === null || child === void 0) {
            return cl;
          } else if (typeof child === "string") {
            cl.push({ type: "textNode", text: child });
            return cl;
          } else if (typeof child === "number") {
            cl.push({ type: "textNode", text: child.toString() });
            return cl;
          }
          cl.push(child);
          return cl;
        },
        []
      );
    } else if (typeof props.children === "boolean" || props.children === null || props.children === void 0) {
      props.children = [];
    }
  }
  return {
    type: "tag",
    // @ts-expect-error
    tag,
    props
  };
};
var jsx = createElement;
var jsxs = jsx;
var _jsx = jsx;
var _jsxs = jsx;
var Fragment = "";
var _Fragment = Fragment;
export {
  Fragment,
  _Fragment,
  _jsx,
  _jsxs,
  createElement,
  jsx,
  jsxs
};
