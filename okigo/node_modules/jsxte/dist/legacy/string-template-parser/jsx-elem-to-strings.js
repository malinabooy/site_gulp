"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/string-template-parser/jsx-elem-to-strings.ts
var jsx_elem_to_strings_exports = {};
__export(jsx_elem_to_strings_exports, {
  jsxElemToTagFuncArgsSync: () => jsxElemToTagFuncArgsSync
});
module.exports = __toCommonJS(jsx_elem_to_strings_exports);
var import_context_map = require("../context-map/context-map.js");
var import_error_boundary = require("../error-boundary/error-boundary.js");
var import_map_attribute_name = require("./map-attribute-name.js");
var import_resolve_element = require("./resolve-element.js");
var isSyncElem = (e) => true;
var concatToLastStringOrPush = (a, s) => {
  if (s) {
    if (a[0][a[0].length - 1] !== void 0) {
      a[0][a[0].length - 1] += s;
    } else {
      a[0].push(s);
    }
  }
};
var jsxElemToTagFuncArgsSync = (element, attributeMap, contextMap = import_context_map.ContextMap.create()) => {
  contextMap = import_context_map.ContextMap.clone(contextMap);
  if (!isSyncElem(element))
    throw new Error("");
  if (element.type === "textNode") {
    return [["", ""], [element.text]];
  }
  if (typeof element.tag !== "string") {
    if (import_error_boundary.ErrorBoundary._isErrorBoundary(element.tag)) {
      const boundary = new element.tag(element.props);
      try {
        const subElem2 = boundary.render(
          element.props,
          contextMap
        );
        if (subElem2 instanceof Promise) {
          throw new Error(
            `Encountered an async Component: [${element.tag.name}.render] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
          );
        }
        return jsxElemToTagFuncArgsSync(subElem2, attributeMap, contextMap);
      } catch (e) {
        const fallbackElem = boundary.onError(
          e,
          element.props,
          contextMap
        );
        if (fallbackElem instanceof Promise) {
          throw new Error(
            `Encountered an async Component: [${element.tag.name}.onError] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
          );
        }
        return jsxElemToTagFuncArgsSync(fallbackElem, attributeMap, contextMap);
      }
    }
    const subElem = element.tag(
      element.props,
      contextMap
    );
    if (subElem instanceof Promise) {
      throw new Error(
        `Encountered an async Component: [${element.tag.name}] Asynchronous Component's cannot be parsed by rendertoHTML. If you wante to use asynchronous components use renderToHtmlAsync instead.`
      );
    }
    return jsxElemToTagFuncArgsSync(subElem, attributeMap, contextMap);
  } else {
    const { attributes, children } = (0, import_resolve_element.resolveElement)(element);
    if (element.tag === "") {
      const results = [[], []];
      for (const child of children) {
        const [[first, ...strings], tagParams] = jsxElemToTagFuncArgsSync(
          child,
          attributeMap,
          contextMap
        );
        concatToLastStringOrPush(results, first);
        results[0].push(...strings);
        results[1].push(...tagParams);
      }
      return results;
    } else {
      const results = [[], []];
      const part1 = `<${element.tag}`;
      const part2 = ">";
      const part3 = `</${element.tag}>`;
      results[0].push(part1);
      const attrList = Object.entries(attributes);
      for (const index in attrList) {
        const [attrName, value] = attrList[index];
        concatToLastStringOrPush(
          results,
          ` ${(0, import_map_attribute_name.mapAttributeName)(attrName, attributeMap)}="`
        );
        results[1].push(value);
        results[0].push('"');
      }
      concatToLastStringOrPush(results, part2);
      for (const child of children) {
        const [[first, ...strings], tagParams] = jsxElemToTagFuncArgsSync(
          child,
          attributeMap,
          contextMap
        );
        concatToLastStringOrPush(results, first);
        results[0].push(...strings);
        results[1].push(...tagParams);
      }
      concatToLastStringOrPush(results, part3);
      return results;
    }
  }
};
