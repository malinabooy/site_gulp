import type { ContextMap } from "../context-map/context-map";
/**
 * Creates an in-memory cache for the provided component and
 * returns a new component that will shallow compare props
 * provided to it and return a cached html string if the props
 * match those provided in previous renders.
 *
 * Props comparison is shallow, so it's best to avoid using
 * `memo` on components that have objects passed to it as props.
 *
 * Component children are not compared, so if only children
 * change, the component will use the cached html string and not
 * reflect those changes.
 */
export declare const memo: <P extends object & {
    children?: any;
}>(Component: (props: P, context: ContextMap) => JSX.Element, options?: {
    /** Time in milliseconds. Default: 15 minutes. */
    maxCacheAge?: number;
    /**
     * Whether to use `renderToHtmlAsync` or `renderToHtml` to
     * render this component. Default: `false`.
     */
    renderAsynchronously?: boolean;
    /** Maximum number of cached entries to keep in memory. Default: 10. */
    maxCacheEntries?: number;
}) => ((props: P, context: ContextMap) => Promise<JSXTE.TextNodeElement>) | ((props: P, context: ContextMap) => JSXTE.TextNodeElement);
