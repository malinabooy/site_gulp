export declare class ContextMap {
    private map;
    static create(): ContextMap;
    static clone(original: ContextMap): ContextMap;
    private constructor();
    /**
     * Retrieve the context data for the specified context. If the
     * context has never been set by any of this component
     * ancestors an error will be thrown.
     */
    get<T>(ref: ContextDefinition<T>): T;
    /**
     * Partially update the state of the context data. Works only
     * for objects and can only be used if some context data is
     * already set beforehand.
     *
     * Updates to the context made with this method are only
     * visible to this component and it's descendants.
     */
    update<T extends object>(ref: ContextDefinition<T>, updateData: Partial<T>): void;
    /**
     * Sets the context data for the specified context.
     *
     * Changes to the context made with this method are only
     * visible to this component and it's descendants.
     */
    set<T>(ref: ContextDefinition<T>, data: T): void;
    /** Check if the context data for the specified context is set. */
    has<T>(ref: ContextDefinition<T>): boolean;
}
export declare class ContextDefinition<T> {
    id: symbol;
}
export declare const defineContext: <T = unknown>() => ContextDefinition<T>;
